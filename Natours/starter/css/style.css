/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.7;
  color: #777;
  padding: 30px;
}

.header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 131, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;

  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
}

.logo {
  height: 35px;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /* text-align will align inline elements only, but not any block elements. */
  /* Because the button has display: inline-block. text-align centers inline elements, you set it on the parent element so the children get centered. If you set text-align on the button itself it will only center the text inside the button (which is already centered). */
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;

  backface-visibility: hidden;
  margin-bottom: 60px;
}

.heading-primary-main {
  display: block;
  font-size: 60px;
  font-weight: 400;
  letter-spacing: 35px;
  margin-right: -35px;

  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;

  /*
  animation-delay: 3s;
  animation-iteration-count: 3;
  */
}

.heading-primary-sub {
  display: block;
  font-size: 20px;
  font-weight: 700;
  letter-spacing: 17.4px;
  margin-right: -17.4px;

  animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-100px);
  }

  80% {
    transform: translateX(10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(100px);
  }

  80% {
    transform: translateX(-10px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* 링크 기본 그 자체, 이미 방문한 링크 */
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 15px 40px;
  /* 패딩이나 높이, 가로 이런걸 주고 싶으면 inline-block */
  /* 이게 아니면 바로 위에 있는 텍스트랑 조금 겹치는 부분이 생긴다. */
  display: inline-block;
  border-radius: 100px;
  transition: all 0.2s;
  position: relative;
}

/* 마우스 올렸을 때 */
.btn:hover {
  transform: translateY(-3px);
  /* box-shadow: x축 y축 그림자사이즈 그림자색 */
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

/* 클릭했을 때 */
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn-white {
  background-color: #fff;
  color: #777;
}

.btn::after {
  /* content가 빈칸이라도 지정을 해줘야하고 */
  /* display도 ::after를 쓰려면 지정해줘야한다. 여기서는 버튼을 이미 inline-block으로 사용중이었기 때문에 똑같이 해줬다 */
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 100px;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn-white::after {
  background-color: #fff;
}

.btn:hover::after {
  /* 사이즈가 커진다. */
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

.btn-animated {
  /* 애니메이션이름 진행시간 스타일 딜레이 */
  animation: moveInBottom 0.5s ease-out 0.75;
  /* 애니메이션이 시작할 때 모든 요소를 0으로 맞추고 진행한다 */
  animation-fill-mode: backwards;
}
